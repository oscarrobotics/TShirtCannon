// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc832.TShirtCannon;
import org.usfirst.frc832.TShirtCannon.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton leftTrigger;
    public JoystickButton left3;
    public JoystickButton left4;
    public JoystickButton left7;
    public JoystickButton left10;
    public JoystickButton left11;
    public Joystick leftStick;
    public JoystickButton right2;
    public JoystickButton right3;
    public JoystickButton rightTrigger;
    public Joystick rightStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightStick = new Joystick(2);
        
        rightTrigger = new JoystickButton(rightStick, 1);
        rightTrigger.whileHeld(new holdAngle());
        right3 = new JoystickButton(rightStick, 3);
        right3.whileHeld(new angleUp());
        right2 = new JoystickButton(rightStick, 2);
        right2.whileHeld(new angleDown());
        leftStick = new Joystick(1);
        
        left11 = new JoystickButton(leftStick, 11);
        left11.whenPressed(new LED_rainbowAddGlitter());
        left10 = new JoystickButton(leftStick, 10);
        left10.whileHeld(new LED_Confetti());
        left7 = new JoystickButton(leftStick, 7);
        left7.whileHeld(new LED_rainbow());
        left4 = new JoystickButton(leftStick, 4);
        left4.whileHeld(new light());
        left3 = new JoystickButton(leftStick, 2);
        left3.whileHeld(new compress());
        leftTrigger = new JoystickButton(leftStick, 1);
        leftTrigger.whileHeld(new fireCannon());
	    
        // SmartDashboard Buttons
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getleftStick() {
        return leftStick;
    }
    public Joystick getrightStick() {
        return rightStick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
